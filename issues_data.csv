cs56-scrapers-ucsb-curriculum
16	OPEN	Not Assigned	Add defensive try-catch blocks	Screen scrapers are destined to rot. My nature, they depend on the structure of the particular web site that you are scraping...many websites become restructured and rewritten over the years, which will inevitably break any scrapers using them.To make this screen scraper easier to maintain, add try-catch blocks to any pieces of code that are susceptible to breaking and refer to them in the comments below.I already found one for you as an example. I did not add a try-catch block so go ahead and complete that for a free 100 pts :). Search for the comment that says *issue* on line 284 of UCSBCurriculumSearch.java.Each appropriate try-catch block:Approved 100pts	
15	OPEN	Not Assigned	Create a user-friendly GUI	Currently the program is used through the command line. Create a GUI so that users can enter the information (e.g. CMPSC, Spring, 2014, Undergraduate) in a user-friendly way. I would suggest using drop down menus like it's done on the website being scraped (https://my.sa.ucsb.edu/public/curriculum/coursesearch.aspx).Drop-down menus would require that you would need to scrape all of the departments and store them somewhere (text file) so the program could read them in on start.Approved 500 pts	
14	CLOSED	Not Assigned	Update README.md	Added images and some clarifying text.	
13	OPEN	Not Assigned	Parse enrollCode for lectures with no sections	The lectures and sections seem to be correctly parsing.Enroll codes are only present in sections and not in lectures. However, there are some lectures with no sections at all, such as CMPSCCS 130A of Spring 2014. These lectures DO have Enroll codes.Add an enrollCode data member inside UCSBLecture.java and add/edit the appropriate getters/setters/toString methods.Parse the enroll code for lectures that have no sections.~estimated 100	
12	CLOSED	Kyle Jorgensen	cs56-scapers-ucsb-curriculum: Kevin Mai pull request	jstaahl~requested: 550	
11	CLOSED	Kevin Mai	Allow the user to make course queries (you can get creative here!)	~depends #10 First complete the implementations for the remaining stubbed methods. There are a number of methods with stub implementations but each should be fairly straight forward provided that issue #10 has been completed.Right now the program is hard coded to search for computer science courses in the quarter of S14. Design a search criteria upon which the user can search for courses. This is an opportunity for you to get creative here.  Have you ever thought that Gold's course search or even "Advanced" course search was highly limited and wanted to make more specific searches on courses?  Prompt the user for the search criteria you deem important and print the resulting courses. You may decide the user can input a series of time intervals and be given the results for the courses that do not conflict with these time intervals, etc.  There are infinite possibilities.~estimated 250	
10	CLOSED	Kevin Mai	Implement Section Scraping	Implement the stub method parseSectionHtml() to create section objects that get added to the most recently parsed lecture object. First you will need to fix the method findPrimaryCourseAbbr().~estimated 150	
9	CLOSED	Not Assigned	Resolving Issue#1	Updated README for issue #1	
8	CLOSED	Not Assigned	This is a test	fixes #1	
7	CLOSED	Not Assigned	Fix 500 internal error	Fixes issue #6	
6	CLOSED	Not Assigned	500 Internal Error when running	When scraping server returns a 500 error due to malformed request~requested: 360	
5	CLOSED	Not Assigned	Added stuff for HTTPS		
4	CLOSED	Mark Nguyen	URL has moved to https, so must change code to use HTTPS.	Turning on debug, we see that the URL being retrieved by the Java code is returning the page:```run:     [java] extractHiddenFieldValue: page=<html><head><title>Moved Permanently</title></head><body><p>The URI that you requested has been <a href="https://my.sa.ucsb.edu/public/curriculum/coursesearch.aspx">moved to here</a>.</p></body></html>```Here are a few links from Google searching "java https"  that might be helpful.http://stackoverflow.com/questions/6927427/how-to-send-https-post-request-in-javahttp://www.mkyong.com/java/java-https-client-httpsurlconnection-example/	
3	CLOSED	Not Assigned	added jar file for junit		
2	CLOSED	Not Assigned	I made the build.xml a little better.  I hope you like it.  I added descriptions. You're welcome.		
1	CLOSED	null	enhance the project description in the README	Take the description from [this page](https://foo.cs.ucsb.edu/cs56/issues/0000660/) and translate it to markdown in the README.md file.	
cs56-scrapers-baseball-stats
12	CLOSED	Not Assigned	proj 2 pull request	Fixed most of the comments inclduing adding @Before public void setup() methods to all of the test classes and removing multiple assert statements per, and using assertTrue.	
11	CLOSED	Kyle Jorgensen	Project 1 submission	~requested: 500#3 for 50 points#6 for 150 points#4 for 300 points @jstaahl	
10	OPEN	null	Fuzzy Search	This issue depends on #9 Once search is working for players, add the ability for ["fuzzy search", also known as "approximate string matching"](http://en.wikipedia.org/wiki/Approximate_string_matching). For example if I couldn't remember a player's full first and last name, but I remembered that his first name began with "Han" and his last name began with "Ram", I could search "Han Ram" and be presented with the player "Hanley Ramirez". Or, if I forgot how to spell his name and typed "Hanly Ramirez" I should still be presented with the result for "Hanley Ramirez". There should be some [Solr](https://lucene.apache.org/solr/) library functions available to help achieve this.Estimated 250 pts	
9	OPEN	null	Search functionality	Add the appropriate Java Swing elements to create a "search box" where you can enter the name of a player for which you would like to view statistics. This would be used to filter the data. For example, typing "Tony Gwynn" would result in just the one row of statistics for that player. Alternatively, typing "Gonzalez" should result in the statistics for any player with "Gonzalez" in his name. This means that the search should look at both first and last names. If there are no results found for a given search, then display an appropriate message to the user. The [Apache Solr](http://lucene.apache.org/solr/) library may be helpful for this. [Here is a simple tutorial](http://lucene.apache.org/solr/4_0_0/tutorial.html). 	
8	OPEN	null	Advanced Stats - Splits	Right now the *Split* class is not used for the display of any statistics. Create a way of viewing an "Advanced Statistics" window, which will contain a similar table layout, but will display statistics for associated splits. It makes the most sense to organize a table of splits by player. So, design a way to select one player, and then display his respective splits. This is an example layout| Split | Statistic_1 | Statistic_2 | Statistic_3 ||-------|---------------|-----------|--------------||  "name of split"  |  aaa | bbb | ccc |For more examples, look at the layout of split statistics [for players on fangraphs.com](http://www.fangraphs.com/statsplits.aspx?playerid=8001&position=SS&season=2013)Estimated 600 pts	
7	OPEN	null	View a player's stats	When viewing the whole table of data, implement the ability to select a player and open a new window with detailed statistics for that player. The exact user interaction which will cause the opening of the new window is left up to the developer. One option might be to double click on a player's name to cause the opening of a new window. Another option might be to add additional buttons next to the table, and when a player's name is selected, the user can click a button to "Show Player Stats" which causes the opening of the new window. Estimated 300 pts	
6	CLOSED	null	Sort stats by column	When viewing the table of statistics, implement the ability to click on the header of a given column to sort the players in the table by the value in that specific column. For example, if you click on the column labeled as HR, then all of the players in the table will be sorted by highest to lowest HR value. This will require some advanced knowledge about the Java Swing GUI elements. Estimated 400 points	
5	OPEN	null	Refactor "global" functions into better object-oriented design	taken from [Conrad's comment on Mantis](https://foo.cs.ucsb.edu/56mantis/view.php?id=785): > As a challenge: see if you can find a way to handle the interaction among the components without resorting to using what amount to "global variables", i.e. the public static references to Main.blah. It takes a bit more thinking, but will result in a more robust piece of code, with more potential for reuse, and fewer opportunities to make errors.The `Main.java` file is the primary location of this issue, with the following static functions```java    public static MainWindow getMainWindow()	{		return mainwindow;	}		public static StatReader getStatReader()	{		return statReader;	}		public static StatKeeper getStatKeeper()	{		return statKeeper;	}```The goal is to abstract the logic for each of these classes, so that you don't need to access the `statReader` or `statKeeper` via the Main class.Estimated 450 pts	
4	CLOSED	null	Add JUnit tests for basic classes	For long-term development of this project, it is very important to have good test coverage of the existing code. Since there are multiple "moving parts" in this project -- from the parsing of the data to calculating statistics and maintaining all the info for lots of players -- tests are helpful to make sure that when we add new functionality we don't break any existing code. Add JUnit tests for the following classes, testing all functions and corner cases. * Player* Split* StatCalculator* StatKeeper* StatManager* StatReader (This one handles the XML parsing, so you may need to also create some "test" XML files)* Statistic* XMLContentHandlerEstimated 300 pts 	
3	CLOSED	null	Add some more javadoc comments	There are some areas of the code that could use some more javadoc comments to explain the functionality of certain classes. Starting with this issue is a good way to understand how this scraper works. The classes that need more javadocs are:* Player* StatManager* StatKeeper* Statistic* XMLContentHandler (if you have time. This class implements an interface called "ContentHandler", so you will need to understand what a ContentHandler does to understand what this class does)Estimated points - 50 ptsEstimated points (including XMLContentHandler) - 80 pts 	
2	CLOSED	Not Assigned	refine code to remove "global vairables"	taken from [Conrad's comment on Mantis](https://foo.cs.ucsb.edu/56mantis/view.php?id=785): > As a challenge: see if you can find a way to handle the interaction among the components without resorting to using what amount to "global variables", i.e. the public static references to Main.blah. It takes a bit more thinking, but will result in a more robust piece of code, with more potential for reuse, and fewer opportunities to make errors.	
1	CLOSED	Not Assigned	allow the user to download additional game files	Right now it uses sample data that is already downloaded. An enhancement could allow a user to add more files to add to the statistics	
cs56-utilities-GEscraper
20	OPEN	Not Assigned	Create W16_lab05.md	Marco SimoneSimon Huynh	
19	OPEN	Not Assigned	Allow searching on multiple criteria	Let users find courses that fulfill say Area D and Ethnicity and Writing requirement.Possibly implement a full boolean searche.g. (Area D or Area E or Area G) and (Writ or Ethnicity)Approved 350 points	
18	OPEN	Not Assigned	Web Client	Make a web client that runs off your csil account. May want to consider ruby on rails, node, django, or flask. Or spring if you LOVEEEE java.  Save past searches and create an account on this web app. ~500 pts	
17	OPEN	Not Assigned	Sort Results	Be able to sort the results by department, subject, upper/lower div, course number. ~200 pts	
16	OPEN	Not Assigned	Incorrect Input Handling	More verbose exception handling when users enter the incorrect area and department abbreviations, i.g. Give an example of an approved input~50 points	
15	OPEN	Not Assigned	Create Test Cases via JUnit	The application runs but needs to have adequate test cases. These test cases need to check if the right list of area and departments and any combination is being returned.~100 points	
14	CLOSED	Not Assigned	Beautification	Updated comments and pointed out future refractoring25 Points <- Paz approved	
13	CLOSED	Not Assigned	lab07 Pull Request to dlynch305 branch (was lab06)		
12	OPEN	Not Assigned	Mash up of the GE Scraper with the UCSB Curriculum Search	There is a project here that allows access to the UCSB Curriculum Search page.   https://github.com/UCSB-CS56-Projects/cs56-utilities-ucsb-curriculum-htmlunitThat allows you to see what courses are being offered in a particular department in a particular quarter.Do a mash up that allows you to see, for some GE area, which courses from that are are ACTUALLY BEING OFFERED in a particular quarter, e.g. S15.Alternatively, do a mashup that allows you to see, for each GE on an area's list, a list of all quarters that course was offered (from among all the quarters currently available through the UCSB curriculum search page.)   This is helpful because the best 'predictor' of when a course will be offered (and indeed even whether it is EVER going to be offered again) is to see how often it was offered in the recent past, and which quarter(s) it was offered.The next step would be to also indicate for each of those offerings what the enrollment is/was, and the total number of seats in the course, to see whether or not the course is/was/is likely to be full.	
11	CLOSED	Not Assigned	Test for getting a specific department from an area	Test for making sure getSpecificCourses(area, department) works.~50 points	
10	CLOSED	Not Assigned	HELP Feature	A way for the user to input "HELP" to see a list of all Area and Special Subject abbreviations available for input.~100 points	
9	CLOSED	Not Assigned	Lab06	Includes the .md for lab06	
8	CLOSED	Not Assigned	Better Formatting - Usability	The current format is hard to read. Update the formatting at the command line. Also add the course name. The formatting would include columns.Estimated ~ 100 Points	
7	OPEN	Not Assigned	Basic GUI	Encapsulate into a GUI that is easier to work with.Estimated ~200 points	
6	OPEN	Not Assigned	Allow for more sorting options	Allow the user to specify extra requirements GE classes may fulfill such as writing, European Traditions, ethnicity, ETC. Also allow specification of departments and upper or lower division for depth requirement purposes.Estimated ~400pointsIf this proves too difficult, the depth requirement purposes should be simpler but still considered a standalone feature. Let TA know if only doing this for new issue to be set upEstimated ~ 200 points	
5	CLOSED	Not Assigned	Better user documentation	Make the output easier for the users to understand. Some suggestions: parse department codes into department names, get full course name, label expected sections etcestimated ~100 points	
4	CLOSED	Not Assigned	Allow reuse	Currently the program seems to close after one run through; it may be nicer to have it  run till asked to stop so people can look at multiple outputs without having to rerunEstimated ~50 points	
3	CLOSED	Not Assigned	Program does not appear to be working	It appears that this application is broken.  A year later after successfully compiling and running the program it seems to have broken.  When entering a course area to get GE's for it freezes and does not display the output it should.  I suspect the HTML contents of the page http://my.sa.ucsb.edu/catalog/current/UndergraduateEducation/AreaE.aspx have most likely changed and the code scraper needs to be re-worked to account for the new HTML.~Estimated 200 points	
2	CLOSED	Not Assigned	Finished transferring Mantis to Git (Issue #1)	Finished the GEscraper with refactoring/junit/added features/fixed code	
1	CLOSED	Not Assigned	Project Stewardship	*Review both https://foo.cs.ucsb.edu/cs56/issues/0000089 and https://foo.cs.ucsb.edu/cs56/issues/0000088 and decide if one works better than the other or if some features need to be combined*Migrate code from mantis & fix directory structure*Make sure code still works as expected*Add unit tests*Improve Javadoc comments	
cs56-utilities-GEAR-scraper
4	OPEN	Not Assigned	Update GEAR source	Update URL and page numbers to parse classes from.Approved 50 points	
3	CLOSED	Not Assigned	Issue #1 + optional part	Use "ant run" to run. And "ant runWithGui" to run with gui.@andrewberlsIssue #120 pts for:    Getting Proper Libraries700 pts for:     Implemented working GEAR_Scraper     Followed CoEGECourse implementation     CLI with more advanced features than requested280 pts for:    GUI     Custom URLs~requested: 1000	
2	CLOSED	Not Assigned	basic framework added	The package needs to be fixed in order to run the tests. 	
1	CLOSED	Alan Buzdar	Implement the project according to spec	A minimal starting point has been provided, and now the project has to be built basically from the ground up according to the spec laid out in [README.md](https://github.com/UCSB-CS56-Projects/cs56-utilities-GEAR-scraper/blob/master/README.md). There are a number of sub-tasks to this, namely:* Read the contents of the GEAR catalog PDF into Java objects* Write the code to conform to the interface `CoEGECourse`* Write a class / minimal CLI to accept the URL of a GEAR catalog, and parse/return all course information* (Optional) Add some sort of GUI interface which facilitates specifying URLs, or perhaps accepts file uploads (estimated 200)~estimated 650 points	
cs56-utilities-restaurant-list
9	OPEN	Not Assigned	Integrate with Yelp API to populate database	Create classes that will send web requests to the Yelp API in order to programmatically collect data on local restaurants. This is a hefty issue, but will extend the usability of the program immensely.Resources:Yelp API documentationhttps://www.yelp.com/developers/documentation/v2/overviewHTTP requests in Javahttp://www.mkyong.com/java/how-to-send-http-request-getpost-in-java/Points - 1000	
8	OPEN	Not Assigned	Allow editing of entries	Allow users to edit existing entries.Points - 250	
7	OPEN	Not Assigned	Add support to save images	Enable users to save images of the restaurant when they add their ownPoints - 300	
6	CLOSED	Not Assigned	Completed Project 2	Fixed issue #4 and issue #5Requested ~350	
5	CLOSED	Not Assigned	Error when loading a user-created restaurant	After clicking "Add New", and then entering valid input and clicking "Submit", I am taken back to the window with the drop-down selector with the text "-Select Cusine-". Here I select the new category that I created and the GUI freezes. This is the first line of the exception```[java] Exception in thread "AWT-EventQueue-0" java.lang.NumberFormatException:```	
4	CLOSED	Not Assigned	Export restaurant database to CSV file	Add a feature to save the currently populated restaurant database to a comma separated value file, which can later be loaded by the existing loading feature.~Estimated 300 pts	
3	CLOSED	Kyle Jorgensen	Finished project 1	@jcneally We finished issue #1 and issue #2~requested: 700	
2	CLOSED	Andrew Pang	Sanitize user input	When inputting a restaurant through the GUI, users can submit invalid information and cause multiple errors. Make sure the user inputs valid information before this is saved, preferably giving visible feedback to the user.~estimated 300 points	
1	CLOSED	Brandon Hammel	File parser to populate database	Add a way to populate the restaurant database through (for example) comma separated value files (CSV) or other file parsing.~estimated 400 pts	
cs56-utilities-credit-card-validator
13	OPEN	Not Assigned	Convert to Web Application	Host the program on heroku and convert the GUI to an html form.Bootstrap is a great front-end framework to use in order to make the app look aesthetically pleasing.http://getbootstrap.com/	
12	CLOSED	Not Assigned	Merging EasterAndJay branch to master		
11	CLOSED	Not Assigned	Upload changes made in W15 to EasterAndJay branch	Uploading all my changes to the EasterAndJay branch of the original repo	
10	CLOSED	Not Assigned	Ishi added few more minor GUI tweaks	Added support to describe the type of card that is being validated (e.g. Visa, Mastercard, Amex, etc...).Changed some GUI settings to make it more responsive when resized	
9	OPEN	Not Assigned	Add support to generate more than one credit card number at time	Allow the user to select an amount of credit card numbers he/she would like to generate at one time.Provide the user with appropriate presentation of these numbers (i.e. output text box should be proportional to # of credit card numbers to be generated)	
8	OPEN	Not Assigned	Add asterisk character view support	Currently when a user is inputting their credit card number, the actual numbers show up. Similar to how passwords are displayed upon input, the user should have an option to show the credit card number digits as asterisks "*" as opposed to actual digits.ex) 1234567890123456 should show as:      ********************	
7	CLOSED	Not Assigned	New and improved Credit Card Validator	Now has GUI, correct validation/generation functions, correct package structure, JUnit support, cleaned up comments, and user can choose to create Visa, Amex, Discover, MasterCard.	
6	CLOSED	Not Assigned	Finished low hanging fruit + GUI	Fixed the build.xml file to correctly run JUnit tests. Added local copy of JUnit in the lib subdirectory, added correct package structure. Almost finished with GUI	
5	CLOSED	Not Assigned	Fix Generate function	The methods for generating a random credit card number do not actually generate valid credit card numbers. The methods in RandomCardGen.java need to be fixed.	
4	CLOSED	Not Assigned	fix Test files	Currently doesn't compile with junit test files, fix the import error to get program compiling	
3	CLOSED	Not Assigned	Add support for choosing different issuing networks	Credit card numbers have different fields with different meanings. For example the first digit signifies the "system", e.g. Visa or Mastercard. For each of these systems, the numbers have different structure and meanings. The app should give the user the ability to choose between systems such as American Express / Visa / Mastercard, and generate valid numbers for each.There is information available on how the numbers are structured [here](http://money.howstuffworks.com/personal-finance/debt-management/credit-card1.htm) and [here](http://www.getcreditcardnumbers.com/).~estimated 200	
2	CLOSED	Not Assigned	Add a GUI	Right now the project only provides a command-line interface for generating and validating numbers. There should be a GUI interface with buttons allowing the user to choose between generating/validating, as well as a text input to allow them to type or paste in a number to validate.~estimated 350	
1	CLOSED	Not Assigned	Change code to use proper package structure	The code does not currently use any sort of package structure The code and directory structure should be modified to reflect the new style: `src/edu/ucsb/cs56/projects/utilities/credit_card_validator`, corresponding to a package name of `edu.ucsb.cs56.projects.utilities.credit_card_validator`~estimated 50	
cs56-github-apiv3-simple-rest-client
10	OPEN	Not Assigned	Pull request for lab07	Yamen Alghrer lab07- I was able to fix the issue where not all repositories of UCSB-CS56-Projects were being listed by passing a parameter to the URL.- I was able to iterate through the issues and make it so that it is one issue per line instead of one project per line- Ran into an issue where I reach the x-rate limit...need to authorize application to increase the limit	
9	OPEN	Not Assigned	Fix output of .csv file	Make sure that the .csv file looks like a spreadsheet when it is opened in something like Excel~estimated 100 points	
8	CLOSED	Not Assigned	Parse the javadoc	given a javadoc link; parse through it look for authors and date tag and stuff directly after it, checks for existence returns yes or noestimated 100 points	
7	OPEN	Not Assigned	Add on to issue one, one more level of nesting that iterates through the comments	In issue one we are making the .csv file every line should be a separate issue of every project repo. In this issue, make it so that every line has another line that has all the issue comments. (Find a way to differentiate the comments so that they don't look like the rest of the issue and that you know which issue they belong to. i.e. comment number or white space).points: 200	
6	OPEN	Not Assigned	Given a list of github IDs, check whether each one has a W15-lab04  repo	For each one, write to a file Yes or No whether the repo exists. If it does exist, write the URL of the repo.points:200	
5	OPEN	Not Assigned	List all members of an organization	For UCSB-CS56-W15 organization, list the github IDs of every member to a file.It currently only lists 40.points:75 	
4	CLOSED	Not Assigned	Not accounting for all repos	I noticed that the spreadsheet currently produced does not contain all of the repos in this UCSB-CS56-Projects organization.I also noticed that there are repos missing from https://api.github.com/orgs/UCSB-CS56-Projects/reposThis is probably not an issue with the code, but an issue that should be addressed nonetheless. Maybe we have the wrong link? Or possibly the organization needs to be updated somewhere...?	
3	OPEN	Not Assigned	PARSE Javadoc for "Author" and "Date" 	given a javadoc link; parse through it look for authors and date tag and stuff directly after it, checks for existence returns yes or noestimated 100 points	
2	OPEN	Not Assigned	Parse README files for a javadoc link	makes parser to check for legitimate javadoc link returns yes or no ~100 pointsgoes through all students and makes text document also printing the link~extra 75 points	
1	OPEN	Not Assigned	Add code that can go through every repo in UCSB-CS56-Projects, and every issue, and make a spreadsheet file (.csv) file of every issue	What we want is a a .csv file, that has all the same columns as the existing .csv file created by CS56ProjectList.java BUT instead of just one row (line) per repo, want one line per ISSUE.And add extra columns, which are issue number, issue status (open/closed), user assigned to, title, description.estimate: 300 points.	
cs56-apidemo-facebook
cs56-utilities-GoldScheduler
cs56-scrapers-ucsb-curriculum
17	OPEN	Not Assigned	Add test cases	Add additional test cases for UCSBLectureTest, UCSBSectionTest, and UCSBCurriculumSearchTest.	
16	OPEN	Not Assigned	Add defensive try-catch blocks	Screen scrapers are destined to rot. My nature, they depend on the structure of the particular web site that you are scraping...many websites become restructured and rewritten over the years, which will inevitably break any scrapers using them.To make this screen scraper easier to maintain, add try-catch blocks to any pieces of code that are susceptible to breaking and refer to them in the comments below.I already found one for you as an example. I did not add a try-catch block so go ahead and complete that for a free 100 pts :). Search for the comment that says *issue* on line 284 of UCSBCurriculumSearch.java.Each appropriate try-catch block:Approved 100pts	
15	OPEN	Not Assigned	Create a user-friendly GUI	Currently the program is used through the command line. Create a GUI so that users can enter the information (e.g. CMPSC, Spring, 2014, Undergraduate) in a user-friendly way. I would suggest using drop down menus like it's done on the website being scraped (https://my.sa.ucsb.edu/public/curriculum/coursesearch.aspx).Drop-down menus would require that you would need to scrape all of the departments and store them somewhere (text file) so the program could read them in on start.Approved 500 pts	
14	CLOSED	Not Assigned	Update README.md	Added images and some clarifying text.	
13	OPEN	Not Assigned	Parse enrollCode for lectures with no sections	The lectures and sections seem to be correctly parsing.Enroll codes are only present in sections and not in lectures. However, there are some lectures with no sections at all, such as CMPSCCS 130A of Spring 2014. These lectures DO have Enroll codes.Add an enrollCode data member inside UCSBLecture.java and add/edit the appropriate getters/setters/toString methods.Parse the enroll code for lectures that have no sections.~estimated 100	
12	CLOSED	Kyle Jorgensen	cs56-scapers-ucsb-curriculum: Kevin Mai pull request	jstaahl~requested: 550	
11	CLOSED	Kevin Mai	Allow the user to make course queries (you can get creative here!)	~depends #10 First complete the implementations for the remaining stubbed methods. There are a number of methods with stub implementations but each should be fairly straight forward provided that issue #10 has been completed.Right now the program is hard coded to search for computer science courses in the quarter of S14. Design a search criteria upon which the user can search for courses. This is an opportunity for you to get creative here.  Have you ever thought that Gold's course search or even "Advanced" course search was highly limited and wanted to make more specific searches on courses?  Prompt the user for the search criteria you deem important and print the resulting courses. You may decide the user can input a series of time intervals and be given the results for the courses that do not conflict with these time intervals, etc.  There are infinite possibilities.~estimated 250	
10	CLOSED	Kevin Mai	Implement Section Scraping	Implement the stub method parseSectionHtml() to create section objects that get added to the most recently parsed lecture object. First you will need to fix the method findPrimaryCourseAbbr().~estimated 150	
9	CLOSED	Not Assigned	Resolving Issue#1	Updated README for issue #1	
8	CLOSED	Not Assigned	This is a test	fixes #1	
7	CLOSED	Not Assigned	Fix 500 internal error	Fixes issue #6	
6	CLOSED	Not Assigned	500 Internal Error when running	When scraping server returns a 500 error due to malformed request~requested: 360	
5	CLOSED	Not Assigned	Added stuff for HTTPS		
4	CLOSED	Mark Nguyen	URL has moved to https, so must change code to use HTTPS.	Turning on debug, we see that the URL being retrieved by the Java code is returning the page:```run:     [java] extractHiddenFieldValue: page=<html><head><title>Moved Permanently</title></head><body><p>The URI that you requested has been <a href="https://my.sa.ucsb.edu/public/curriculum/coursesearch.aspx">moved to here</a>.</p></body></html>```Here are a few links from Google searching "java https"  that might be helpful.http://stackoverflow.com/questions/6927427/how-to-send-https-post-request-in-javahttp://www.mkyong.com/java/java-https-client-httpsurlconnection-example/	
3	CLOSED	Not Assigned	added jar file for junit		
2	CLOSED	Not Assigned	I made the build.xml a little better.  I hope you like it.  I added descriptions. You're welcome.		
1	CLOSED	null	enhance the project description in the README	Take the description from [this page](https://foo.cs.ucsb.edu/cs56/issues/0000660/) and translate it to markdown in the README.md file.	
cs56-scrapers-baseball-stats
15	OPEN	Not Assigned	Lab05 overall project analysis	Comments and analysis on baseball statistics program.	
14	OPEN	Not Assigned	Make an All-Star/Fantasy Team	Add a feature that can create a team of all of the best players i.e. an All-Star team or fantasy team.  This will rank the players based on who has high statistics in several categories.	
13	OPEN	Not Assigned	Sort	Add a feature that sorts the players so that they are sorted by highest to lowest batting average, or highest to lowest home runs, etc. This would be done by clicking the particular statistic in the header, which would then sort players based on that statistic which was clicked on.	
12	CLOSED	Not Assigned	proj 2 pull request	Fixed most of the comments inclduing adding @Before public void setup() methods to all of the test classes and removing multiple assert statements per, and using assertTrue.	
11	CLOSED	Kyle Jorgensen	Project 1 submission	~requested: 500#3 for 50 points#6 for 150 points#4 for 300 points @jstaahl	
10	OPEN	null	Fuzzy Search	This issue depends on #9 Once search is working for players, add the ability for ["fuzzy search", also known as "approximate string matching"](http://en.wikipedia.org/wiki/Approximate_string_matching). For example if I couldn't remember a player's full first and last name, but I remembered that his first name began with "Han" and his last name began with "Ram", I could search "Han Ram" and be presented with the player "Hanley Ramirez". Or, if I forgot how to spell his name and typed "Hanly Ramirez" I should still be presented with the result for "Hanley Ramirez". There should be some [Solr](https://lucene.apache.org/solr/) library functions available to help achieve this.Estimated 250 pts	
9	OPEN	null	Search functionality	Add the appropriate Java Swing elements to create a "search box" where you can enter the name of a player for which you would like to view statistics. This would be used to filter the data. For example, typing "Tony Gwynn" would result in just the one row of statistics for that player. Alternatively, typing "Gonzalez" should result in the statistics for any player with "Gonzalez" in his name. This means that the search should look at both first and last names. If there are no results found for a given search, then display an appropriate message to the user. The [Apache Solr](http://lucene.apache.org/solr/) library may be helpful for this. [Here is a simple tutorial](http://lucene.apache.org/solr/4_0_0/tutorial.html). 	
8	OPEN	null	Advanced Stats - Splits	Right now the *Split* class is not used for the display of any statistics. Create a way of viewing an "Advanced Statistics" window, which will contain a similar table layout, but will display statistics for associated splits. It makes the most sense to organize a table of splits by player. So, design a way to select one player, and then display his respective splits. This is an example layout| Split | Statistic_1 | Statistic_2 | Statistic_3 ||-------|---------------|-----------|--------------||  "name of split"  |  aaa | bbb | ccc |For more examples, look at the layout of split statistics [for players on fangraphs.com](http://www.fangraphs.com/statsplits.aspx?playerid=8001&position=SS&season=2013)Estimated 600 pts	
7	OPEN	null	View a player's stats	When viewing the whole table of data, implement the ability to select a player and open a new window with detailed statistics for that player. The exact user interaction which will cause the opening of the new window is left up to the developer. One option might be to double click on a player's name to cause the opening of a new window. Another option might be to add additional buttons next to the table, and when a player's name is selected, the user can click a button to "Show Player Stats" which causes the opening of the new window. Estimated 300 pts	
6	CLOSED	null	Sort stats by column	When viewing the table of statistics, implement the ability to click on the header of a given column to sort the players in the table by the value in that specific column. For example, if you click on the column labeled as HR, then all of the players in the table will be sorted by highest to lowest HR value. This will require some advanced knowledge about the Java Swing GUI elements. Estimated 400 points	
5	OPEN	null	Refactor "global" functions into better object-oriented design	taken from [Conrad's comment on Mantis](https://foo.cs.ucsb.edu/56mantis/view.php?id=785): > As a challenge: see if you can find a way to handle the interaction among the components without resorting to using what amount to "global variables", i.e. the public static references to Main.blah. It takes a bit more thinking, but will result in a more robust piece of code, with more potential for reuse, and fewer opportunities to make errors.The `Main.java` file is the primary location of this issue, with the following static functions```java    public static MainWindow getMainWindow()	{		return mainwindow;	}		public static StatReader getStatReader()	{		return statReader;	}		public static StatKeeper getStatKeeper()	{		return statKeeper;	}```The goal is to abstract the logic for each of these classes, so that you don't need to access the `statReader` or `statKeeper` via the Main class.Estimated 450 pts	
4	CLOSED	null	Add JUnit tests for basic classes	For long-term development of this project, it is very important to have good test coverage of the existing code. Since there are multiple "moving parts" in this project -- from the parsing of the data to calculating statistics and maintaining all the info for lots of players -- tests are helpful to make sure that when we add new functionality we don't break any existing code. Add JUnit tests for the following classes, testing all functions and corner cases. * Player* Split* StatCalculator* StatKeeper* StatManager* StatReader (This one handles the XML parsing, so you may need to also create some "test" XML files)* Statistic* XMLContentHandlerEstimated 300 pts 	
3	CLOSED	null	Add some more javadoc comments	There are some areas of the code that could use some more javadoc comments to explain the functionality of certain classes. Starting with this issue is a good way to understand how this scraper works. The classes that need more javadocs are:* Player* StatManager* StatKeeper* Statistic* XMLContentHandler (if you have time. This class implements an interface called "ContentHandler", so you will need to understand what a ContentHandler does to understand what this class does)Estimated points - 50 ptsEstimated points (including XMLContentHandler) - 80 pts 	
2	CLOSED	Not Assigned	refine code to remove "global vairables"	taken from [Conrad's comment on Mantis](https://foo.cs.ucsb.edu/56mantis/view.php?id=785): > As a challenge: see if you can find a way to handle the interaction among the components without resorting to using what amount to "global variables", i.e. the public static references to Main.blah. It takes a bit more thinking, but will result in a more robust piece of code, with more potential for reuse, and fewer opportunities to make errors.	
1	CLOSED	Not Assigned	allow the user to download additional game files	Right now it uses sample data that is already downloaded. An enhancement could allow a user to add more files to add to the statistics	
cs56-utilities-GEscraper
20	OPEN	Not Assigned	Create W16_lab05.md	Marco SimoneSimon Huynh	
19	OPEN	Not Assigned	Allow searching on multiple criteria	Let users find courses that fulfill say Area D and Ethnicity and Writing requirement.Possibly implement a full boolean searche.g. (Area D or Area E or Area G) and (Writ or Ethnicity)Approved 350 points	
18	OPEN	Not Assigned	Web Client	Make a web client that runs off your csil account. May want to consider ruby on rails, node, django, or flask. Or spring if you LOVEEEE java.  Save past searches and create an account on this web app. ~500 pts	
17	OPEN	Not Assigned	Sort Results	Be able to sort the results by department, subject, upper/lower div, course number. ~200 pts	
16	OPEN	Not Assigned	Incorrect Input Handling	More verbose exception handling when users enter the incorrect area and department abbreviations, i.g. Give an example of an approved input~50 points	
15	OPEN	Not Assigned	Create Test Cases via JUnit	The application runs but needs to have adequate test cases. These test cases need to check if the right list of area and departments and any combination is being returned.~100 points	
14	CLOSED	Not Assigned	Beautification	Updated comments and pointed out future refractoring25 Points <- Paz approved	
13	CLOSED	Not Assigned	lab07 Pull Request to dlynch305 branch (was lab06)		
12	OPEN	Not Assigned	Mash up of the GE Scraper with the UCSB Curriculum Search	There is a project here that allows access to the UCSB Curriculum Search page.   https://github.com/UCSB-CS56-Projects/cs56-utilities-ucsb-curriculum-htmlunitThat allows you to see what courses are being offered in a particular department in a particular quarter.Do a mash up that allows you to see, for some GE area, which courses from that are are ACTUALLY BEING OFFERED in a particular quarter, e.g. S15.Alternatively, do a mashup that allows you to see, for each GE on an area's list, a list of all quarters that course was offered (from among all the quarters currently available through the UCSB curriculum search page.)   This is helpful because the best 'predictor' of when a course will be offered (and indeed even whether it is EVER going to be offered again) is to see how often it was offered in the recent past, and which quarter(s) it was offered.The next step would be to also indicate for each of those offerings what the enrollment is/was, and the total number of seats in the course, to see whether or not the course is/was/is likely to be full.	
11	CLOSED	Not Assigned	Test for getting a specific department from an area	Test for making sure getSpecificCourses(area, department) works.~50 points	
10	CLOSED	Not Assigned	HELP Feature	A way for the user to input "HELP" to see a list of all Area and Special Subject abbreviations available for input.~100 points	
9	CLOSED	Not Assigned	Lab06	Includes the .md for lab06	
8	CLOSED	Not Assigned	Better Formatting - Usability	The current format is hard to read. Update the formatting at the command line. Also add the course name. The formatting would include columns.Estimated ~ 100 Points	
7	OPEN	Not Assigned	Basic GUI	Encapsulate into a GUI that is easier to work with.Estimated ~200 points	
6	OPEN	Not Assigned	Allow for more sorting options	Allow the user to specify extra requirements GE classes may fulfill such as writing, European Traditions, ethnicity, ETC. Also allow specification of departments and upper or lower division for depth requirement purposes.Estimated ~400pointsIf this proves too difficult, the depth requirement purposes should be simpler but still considered a standalone feature. Let TA know if only doing this for new issue to be set upEstimated ~ 200 points	
5	CLOSED	Not Assigned	Better user documentation	Make the output easier for the users to understand. Some suggestions: parse department codes into department names, get full course name, label expected sections etcestimated ~100 points	
4	CLOSED	Not Assigned	Allow reuse	Currently the program seems to close after one run through; it may be nicer to have it  run till asked to stop so people can look at multiple outputs without having to rerunEstimated ~50 points	
3	CLOSED	Not Assigned	Program does not appear to be working	It appears that this application is broken.  A year later after successfully compiling and running the program it seems to have broken.  When entering a course area to get GE's for it freezes and does not display the output it should.  I suspect the HTML contents of the page http://my.sa.ucsb.edu/catalog/current/UndergraduateEducation/AreaE.aspx have most likely changed and the code scraper needs to be re-worked to account for the new HTML.~Estimated 200 points	
2	CLOSED	Not Assigned	Finished transferring Mantis to Git (Issue #1)	Finished the GEscraper with refactoring/junit/added features/fixed code	
1	CLOSED	Not Assigned	Project Stewardship	*Review both https://foo.cs.ucsb.edu/cs56/issues/0000089 and https://foo.cs.ucsb.edu/cs56/issues/0000088 and decide if one works better than the other or if some features need to be combined*Migrate code from mantis & fix directory structure*Make sure code still works as expected*Add unit tests*Improve Javadoc comments	
cs56-utilities-GEAR-scraper
6	OPEN	Not Assigned	Add more features	Potential features could include:A search bar that the user can type into to find courses.Including the engineering courses in the database.	
5	OPEN	Not Assigned	Domenic Dipeppe/Alex Thielk: finished lab05.md		
4	OPEN	Not Assigned	Update GEAR source	Update URL and page numbers to parse classes from.Approved 50 points	
3	CLOSED	Not Assigned	Issue #1 + optional part	Use "ant run" to run. And "ant runWithGui" to run with gui.@andrewberlsIssue #120 pts for:    Getting Proper Libraries700 pts for:     Implemented working GEAR_Scraper     Followed CoEGECourse implementation     CLI with more advanced features than requested280 pts for:    GUI     Custom URLs~requested: 1000	
2	CLOSED	Not Assigned	basic framework added	The package needs to be fixed in order to run the tests. 	
1	CLOSED	Alan Buzdar	Implement the project according to spec	A minimal starting point has been provided, and now the project has to be built basically from the ground up according to the spec laid out in [README.md](https://github.com/UCSB-CS56-Projects/cs56-utilities-GEAR-scraper/blob/master/README.md). There are a number of sub-tasks to this, namely:* Read the contents of the GEAR catalog PDF into Java objects* Write the code to conform to the interface `CoEGECourse`* Write a class / minimal CLI to accept the URL of a GEAR catalog, and parse/return all course information* (Optional) Add some sort of GUI interface which facilitates specifying URLs, or perhaps accepts file uploads (estimated 200)~estimated 650 points	
cs56-utilities-restaurant-list
12	OPEN	Not Assigned	Add Function is completely buggy	When adding a new restaurant with a new cuisine, the cuisine is added but not the restaurant.When adding a new restaurant to an old cuising, the restaurant is not added.	
11	OPEN	Not Assigned	Exit entry creation	The app forces the user to create an entry once they are on the page. We want to give the user a way to exit the page.	
10	OPEN	Not Assigned	Go back by page	When the user presses "go back," go back page by page rather than all the way to the home page.	
9	OPEN	Not Assigned	Integrate with Yelp API to populate database	Create classes that will send web requests to the Yelp API in order to programmatically collect data on local restaurants. This is a hefty issue, but will extend the usability of the program immensely.Resources:Yelp API documentationhttps://www.yelp.com/developers/documentation/v2/overviewHTTP requests in Javahttp://www.mkyong.com/java/how-to-send-http-request-getpost-in-java/Points - 1000	
8	OPEN	Not Assigned	Allow editing of entries	Allow users to edit existing entries.Points - 250	
7	OPEN	Not Assigned	Add support to save images	Enable users to save images of the restaurant when they add their ownPoints - 300	
6	CLOSED	Not Assigned	Completed Project 2	Fixed issue #4 and issue #5Requested ~350	
5	CLOSED	Not Assigned	Error when loading a user-created restaurant	After clicking "Add New", and then entering valid input and clicking "Submit", I am taken back to the window with the drop-down selector with the text "-Select Cusine-". Here I select the new category that I created and the GUI freezes. This is the first line of the exception```[java] Exception in thread "AWT-EventQueue-0" java.lang.NumberFormatException:```	
4	CLOSED	Not Assigned	Export restaurant database to CSV file	Add a feature to save the currently populated restaurant database to a comma separated value file, which can later be loaded by the existing loading feature.~Estimated 300 pts	
3	CLOSED	Kyle Jorgensen	Finished project 1	@jcneally We finished issue #1 and issue #2~requested: 700	
2	CLOSED	Andrew Pang	Sanitize user input	When inputting a restaurant through the GUI, users can submit invalid information and cause multiple errors. Make sure the user inputs valid information before this is saved, preferably giving visible feedback to the user.~estimated 300 points	
1	CLOSED	Brandon Hammel	File parser to populate database	Add a way to populate the restaurant database through (for example) comma separated value files (CSV) or other file parsing.~estimated 400 pts	
cs56-utilities-credit-card-validator
13	OPEN	Not Assigned	Convert to Web Application	Host the program on heroku and convert the GUI to an html form.Bootstrap is a great front-end framework to use in order to make the app look aesthetically pleasing.http://getbootstrap.com/	
12	CLOSED	Not Assigned	Merging EasterAndJay branch to master		
11	CLOSED	Not Assigned	Upload changes made in W15 to EasterAndJay branch	Uploading all my changes to the EasterAndJay branch of the original repo	
10	CLOSED	Not Assigned	Ishi added few more minor GUI tweaks	Added support to describe the type of card that is being validated (e.g. Visa, Mastercard, Amex, etc...).Changed some GUI settings to make it more responsive when resized	
9	OPEN	Not Assigned	Add support to generate more than one credit card number at time	Allow the user to select an amount of credit card numbers he/she would like to generate at one time.Provide the user with appropriate presentation of these numbers (i.e. output text box should be proportional to # of credit card numbers to be generated)	
8	OPEN	Not Assigned	Add asterisk character view support	Currently when a user is inputting their credit card number, the actual numbers show up. Similar to how passwords are displayed upon input, the user should have an option to show the credit card number digits as asterisks "*" as opposed to actual digits.ex) 1234567890123456 should show as:      ********************	
7	CLOSED	Not Assigned	New and improved Credit Card Validator	Now has GUI, correct validation/generation functions, correct package structure, JUnit support, cleaned up comments, and user can choose to create Visa, Amex, Discover, MasterCard.	
6	CLOSED	Not Assigned	Finished low hanging fruit + GUI	Fixed the build.xml file to correctly run JUnit tests. Added local copy of JUnit in the lib subdirectory, added correct package structure. Almost finished with GUI	
5	CLOSED	Not Assigned	Fix Generate function	The methods for generating a random credit card number do not actually generate valid credit card numbers. The methods in RandomCardGen.java need to be fixed.	
4	CLOSED	Not Assigned	fix Test files	Currently doesn't compile with junit test files, fix the import error to get program compiling	
3	CLOSED	Not Assigned	Add support for choosing different issuing networks	Credit card numbers have different fields with different meanings. For example the first digit signifies the "system", e.g. Visa or Mastercard. For each of these systems, the numbers have different structure and meanings. The app should give the user the ability to choose between systems such as American Express / Visa / Mastercard, and generate valid numbers for each.There is information available on how the numbers are structured [here](http://money.howstuffworks.com/personal-finance/debt-management/credit-card1.htm) and [here](http://www.getcreditcardnumbers.com/).~estimated 200	
2	CLOSED	Not Assigned	Add a GUI	Right now the project only provides a command-line interface for generating and validating numbers. There should be a GUI interface with buttons allowing the user to choose between generating/validating, as well as a text input to allow them to type or paste in a number to validate.~estimated 350	
1	CLOSED	Not Assigned	Change code to use proper package structure	The code does not currently use any sort of package structure The code and directory structure should be modified to reflect the new style: `src/edu/ucsb/cs56/projects/utilities/credit_card_validator`, corresponding to a package name of `edu.ucsb.cs56.projects.utilities.credit_card_validator`~estimated 50	
cs56-github-apiv3-simple-rest-client
10	OPEN	Not Assigned	Pull request for lab07	Yamen Alghrer lab07- I was able to fix the issue where not all repositories of UCSB-CS56-Projects were being listed by passing a parameter to the URL.- I was able to iterate through the issues and make it so that it is one issue per line instead of one project per line- Ran into an issue where I reach the x-rate limit...need to authorize application to increase the limit	
9	OPEN	Not Assigned	Fix output of .csv file	Make sure that the .csv file looks like a spreadsheet when it is opened in something like Excel~estimated 100 points	
8	CLOSED	Not Assigned	Parse the javadoc	given a javadoc link; parse through it look for authors and date tag and stuff directly after it, checks for existence returns yes or noestimated 100 points	
7	OPEN	Not Assigned	Add on to issue one, one more level of nesting that iterates through the comments	In issue one we are making the .csv file every line should be a separate issue of every project repo. In this issue, make it so that every line has another line that has all the issue comments. (Find a way to differentiate the comments so that they don't look like the rest of the issue and that you know which issue they belong to. i.e. comment number or white space).points: 200	
6	OPEN	Not Assigned	Given a list of github IDs, check whether each one has a W15-lab04  repo	For each one, write to a file Yes or No whether the repo exists. If it does exist, write the URL of the repo.points:200	
5	OPEN	Not Assigned	List all members of an organization	For UCSB-CS56-W15 organization, list the github IDs of every member to a file.It currently only lists 40.points:75 	
4	CLOSED	Not Assigned	Not accounting for all repos	I noticed that the spreadsheet currently produced does not contain all of the repos in this UCSB-CS56-Projects organization.I also noticed that there are repos missing from https://api.github.com/orgs/UCSB-CS56-Projects/reposThis is probably not an issue with the code, but an issue that should be addressed nonetheless. Maybe we have the wrong link? Or possibly the organization needs to be updated somewhere...?	
3	OPEN	Not Assigned	PARSE Javadoc for "Author" and "Date" 	given a javadoc link; parse through it look for authors and date tag and stuff directly after it, checks for existence returns yes or noestimated 100 points	
2	OPEN	Not Assigned	Parse README files for a javadoc link	makes parser to check for legitimate javadoc link returns yes or no ~100 pointsgoes through all students and makes text document also printing the link~extra 75 points	
1	OPEN	Not Assigned	Add code that can go through every repo in UCSB-CS56-Projects, and every issue, and make a spreadsheet file (.csv) file of every issue	What we want is a a .csv file, that has all the same columns as the existing .csv file created by CS56ProjectList.java BUT instead of just one row (line) per repo, want one line per ISSUE.And add extra columns, which are issue number, issue status (open/closed), user assigned to, title, description.estimate: 300 points.	
cs56-apidemo-facebook
cs56-utilities-GoldScheduler
cs56-scrapers-ucsb-curriculum
19	OPEN	Not Assigned	KZ/NL Wrote about the current state of the project/what could be done…	… to improve itPartners: Kevin Zaragoza, CSIL: K_zara95Natasha Lee, CSIL: natashalee	
18	OPEN	Not Assigned	Course Queries	First complete the implementations for the remaining stubbed methods. There are a number of methods with stub implementations but each should be fairly straight forward provided that issue #10 has been completed.Right now the program is hard coded to search for computer science courses in the quarter of S14. Design a search criteria upon which the user can search for courses. This is an opportunity for you to get creative here. Have you ever thought that Gold's course search or even "Advanced" course search was highly limited and wanted to make more specific searches on courses? Prompt the user for the search criteria you deem important and print the resulting courses. You may decide the user can input a series of time intervals and be given the results for the courses that do not conflict with these time intervals, etc. There are infinite possibilities.500 points	
17	OPEN	Not Assigned	Add test cases	Add additional test cases for UCSBLectureTest, UCSBSectionTest, and UCSBCurriculumSearchTest.	
16	OPEN	Not Assigned	Add defensive try-catch blocks	Screen scrapers are destined to rot. My nature, they depend on the structure of the particular web site that you are scraping...many websites become restructured and rewritten over the years, which will inevitably break any scrapers using them.To make this screen scraper easier to maintain, add try-catch blocks to any pieces of code that are susceptible to breaking and refer to them in the comments below.I already found one for you as an example. I did not add a try-catch block so go ahead and complete that for a free 100 pts :). Search for the comment that says *issue* on line 284 of UCSBCurriculumSearch.java.Each appropriate try-catch block:Approved 100pts	
15	OPEN	Not Assigned	Create a user-friendly GUI	Currently the program is used through the command line. Create a GUI so that users can enter the information (e.g. CMPSC, Spring, 2014, Undergraduate) in a user-friendly way. I would suggest using drop down menus like it's done on the website being scraped (https://my.sa.ucsb.edu/public/curriculum/coursesearch.aspx).Drop-down menus would require that you would need to scrape all of the departments and store them somewhere (text file) so the program could read them in on start.Approved 500 pts	
14	CLOSED	Not Assigned	Update README.md	Added images and some clarifying text.	
13	OPEN	Not Assigned	Parse enrollCode for lectures with no sections	The lectures and sections seem to be correctly parsing.Enroll codes are only present in sections and not in lectures. However, there are some lectures with no sections at all, such as CMPSCCS 130A of Spring 2014. These lectures DO have Enroll codes.Add an enrollCode data member inside UCSBLecture.java and add/edit the appropriate getters/setters/toString methods.Parse the enroll code for lectures that have no sections.~estimated 100	
12	CLOSED	Kyle Jorgensen	cs56-scapers-ucsb-curriculum: Kevin Mai pull request	jstaahl~requested: 550	
11	CLOSED	Kevin Mai	Allow the user to make course queries (you can get creative here!)	~depends #10 First complete the implementations for the remaining stubbed methods. There are a number of methods with stub implementations but each should be fairly straight forward provided that issue #10 has been completed.Right now the program is hard coded to search for computer science courses in the quarter of S14. Design a search criteria upon which the user can search for courses. This is an opportunity for you to get creative here.  Have you ever thought that Gold's course search or even "Advanced" course search was highly limited and wanted to make more specific searches on courses?  Prompt the user for the search criteria you deem important and print the resulting courses. You may decide the user can input a series of time intervals and be given the results for the courses that do not conflict with these time intervals, etc.  There are infinite possibilities.~estimated 250	
10	CLOSED	Kevin Mai	Implement Section Scraping	Implement the stub method parseSectionHtml() to create section objects that get added to the most recently parsed lecture object. First you will need to fix the method findPrimaryCourseAbbr().~estimated 150	
9	CLOSED	Not Assigned	Resolving Issue#1	Updated README for issue #1	
8	CLOSED	Not Assigned	This is a test	fixes #1	
7	CLOSED	Not Assigned	Fix 500 internal error	Fixes issue #6	
6	CLOSED	Not Assigned	500 Internal Error when running	When scraping server returns a 500 error due to malformed request~requested: 360	
5	CLOSED	Not Assigned	Added stuff for HTTPS		
4	CLOSED	Mark Nguyen	URL has moved to https, so must change code to use HTTPS.	Turning on debug, we see that the URL being retrieved by the Java code is returning the page:```run:     [java] extractHiddenFieldValue: page=<html><head><title>Moved Permanently</title></head><body><p>The URI that you requested has been <a href="https://my.sa.ucsb.edu/public/curriculum/coursesearch.aspx">moved to here</a>.</p></body></html>```Here are a few links from Google searching "java https"  that might be helpful.http://stackoverflow.com/questions/6927427/how-to-send-https-post-request-in-javahttp://www.mkyong.com/java/java-https-client-httpsurlconnection-example/	
3	CLOSED	Not Assigned	added jar file for junit		
2	CLOSED	Not Assigned	I made the build.xml a little better.  I hope you like it.  I added descriptions. You're welcome.		
1	CLOSED	null	enhance the project description in the README	Take the description from [this page](https://foo.cs.ucsb.edu/cs56/issues/0000660/) and translate it to markdown in the README.md file.	
cs56-scrapers-baseball-stats
15	OPEN	Not Assigned	Lab05 overall project analysis	Comments and analysis on baseball statistics program.	
14	OPEN	Not Assigned	Make an All-Star/Fantasy Team	Add a feature that can create a team of all of the best players i.e. an All-Star team or fantasy team.  This will rank the players based on who has high statistics in several categories.	
13	OPEN	Not Assigned	Sort	Add a feature that sorts the players so that they are sorted by highest to lowest batting average, or highest to lowest home runs, etc. This would be done by clicking the particular statistic in the header, which would then sort players based on that statistic which was clicked on.	
12	CLOSED	Not Assigned	proj 2 pull request	Fixed most of the comments inclduing adding @Before public void setup() methods to all of the test classes and removing multiple assert statements per, and using assertTrue.	
11	CLOSED	Kyle Jorgensen	Project 1 submission	~requested: 500#3 for 50 points#6 for 150 points#4 for 300 points @jstaahl	
10	OPEN	null	Fuzzy Search	This issue depends on #9 Once search is working for players, add the ability for ["fuzzy search", also known as "approximate string matching"](http://en.wikipedia.org/wiki/Approximate_string_matching). For example if I couldn't remember a player's full first and last name, but I remembered that his first name began with "Han" and his last name began with "Ram", I could search "Han Ram" and be presented with the player "Hanley Ramirez". Or, if I forgot how to spell his name and typed "Hanly Ramirez" I should still be presented with the result for "Hanley Ramirez". There should be some [Solr](https://lucene.apache.org/solr/) library functions available to help achieve this.Estimated 250 pts	
9	OPEN	null	Search functionality	Add the appropriate Java Swing elements to create a "search box" where you can enter the name of a player for which you would like to view statistics. This would be used to filter the data. For example, typing "Tony Gwynn" would result in just the one row of statistics for that player. Alternatively, typing "Gonzalez" should result in the statistics for any player with "Gonzalez" in his name. This means that the search should look at both first and last names. If there are no results found for a given search, then display an appropriate message to the user. The [Apache Solr](http://lucene.apache.org/solr/) library may be helpful for this. [Here is a simple tutorial](http://lucene.apache.org/solr/4_0_0/tutorial.html). 	
8	OPEN	null	Advanced Stats - Splits	Right now the *Split* class is not used for the display of any statistics. Create a way of viewing an "Advanced Statistics" window, which will contain a similar table layout, but will display statistics for associated splits. It makes the most sense to organize a table of splits by player. So, design a way to select one player, and then display his respective splits. This is an example layout| Split | Statistic_1 | Statistic_2 | Statistic_3 ||-------|---------------|-----------|--------------||  "name of split"  |  aaa | bbb | ccc |For more examples, look at the layout of split statistics [for players on fangraphs.com](http://www.fangraphs.com/statsplits.aspx?playerid=8001&position=SS&season=2013)Estimated 600 pts	
7	OPEN	null	View a player's stats	When viewing the whole table of data, implement the ability to select a player and open a new window with detailed statistics for that player. The exact user interaction which will cause the opening of the new window is left up to the developer. One option might be to double click on a player's name to cause the opening of a new window. Another option might be to add additional buttons next to the table, and when a player's name is selected, the user can click a button to "Show Player Stats" which causes the opening of the new window. Estimated 300 pts	
6	CLOSED	null	Sort stats by column	When viewing the table of statistics, implement the ability to click on the header of a given column to sort the players in the table by the value in that specific column. For example, if you click on the column labeled as HR, then all of the players in the table will be sorted by highest to lowest HR value. This will require some advanced knowledge about the Java Swing GUI elements. Estimated 400 points	
5	OPEN	null	Refactor "global" functions into better object-oriented design	taken from [Conrad's comment on Mantis](https://foo.cs.ucsb.edu/56mantis/view.php?id=785): > As a challenge: see if you can find a way to handle the interaction among the components without resorting to using what amount to "global variables", i.e. the public static references to Main.blah. It takes a bit more thinking, but will result in a more robust piece of code, with more potential for reuse, and fewer opportunities to make errors.The `Main.java` file is the primary location of this issue, with the following static functions```java    public static MainWindow getMainWindow()	{		return mainwindow;	}		public static StatReader getStatReader()	{		return statReader;	}		public static StatKeeper getStatKeeper()	{		return statKeeper;	}```The goal is to abstract the logic for each of these classes, so that you don't need to access the `statReader` or `statKeeper` via the Main class.Estimated 450 pts	
4	CLOSED	null	Add JUnit tests for basic classes	For long-term development of this project, it is very important to have good test coverage of the existing code. Since there are multiple "moving parts" in this project -- from the parsing of the data to calculating statistics and maintaining all the info for lots of players -- tests are helpful to make sure that when we add new functionality we don't break any existing code. Add JUnit tests for the following classes, testing all functions and corner cases. * Player* Split* StatCalculator* StatKeeper* StatManager* StatReader (This one handles the XML parsing, so you may need to also create some "test" XML files)* Statistic* XMLContentHandlerEstimated 300 pts 	
3	CLOSED	null	Add some more javadoc comments	There are some areas of the code that could use some more javadoc comments to explain the functionality of certain classes. Starting with this issue is a good way to understand how this scraper works. The classes that need more javadocs are:* Player* StatManager* StatKeeper* Statistic* XMLContentHandler (if you have time. This class implements an interface called "ContentHandler", so you will need to understand what a ContentHandler does to understand what this class does)Estimated points - 50 ptsEstimated points (including XMLContentHandler) - 80 pts 	
2	CLOSED	Not Assigned	refine code to remove "global vairables"	taken from [Conrad's comment on Mantis](https://foo.cs.ucsb.edu/56mantis/view.php?id=785): > As a challenge: see if you can find a way to handle the interaction among the components without resorting to using what amount to "global variables", i.e. the public static references to Main.blah. It takes a bit more thinking, but will result in a more robust piece of code, with more potential for reuse, and fewer opportunities to make errors.	
1	CLOSED	Not Assigned	allow the user to download additional game files	Right now it uses sample data that is already downloaded. An enhancement could allow a user to add more files to add to the statistics	
cs56-utilities-GEscraper
20	OPEN	Not Assigned	Create W16_lab05.md	Marco SimoneSimon Huynh	
19	OPEN	Not Assigned	Allow searching on multiple criteria	Let users find courses that fulfill say Area D and Ethnicity and Writing requirement.Possibly implement a full boolean searche.g. (Area D or Area E or Area G) and (Writ or Ethnicity)Approved 350 points	
18	OPEN	Not Assigned	Web Client	Make a web client that runs off your csil account. May want to consider ruby on rails, node, django, or flask. Or spring if you LOVEEEE java.  Save past searches and create an account on this web app. ~500 pts	
17	OPEN	Not Assigned	Sort Results	Be able to sort the results by department, subject, upper/lower div, course number. ~200 pts	
16	OPEN	Not Assigned	Incorrect Input Handling	More verbose exception handling when users enter the incorrect area and department abbreviations, i.g. Give an example of an approved input~50 points	
15	OPEN	Not Assigned	Create Test Cases via JUnit	The application runs but needs to have adequate test cases. These test cases need to check if the right list of area and departments and any combination is being returned.~100 points	
14	CLOSED	Not Assigned	Beautification	Updated comments and pointed out future refractoring25 Points <- Paz approved	
13	CLOSED	Not Assigned	lab07 Pull Request to dlynch305 branch (was lab06)		
12	OPEN	Not Assigned	Mash up of the GE Scraper with the UCSB Curriculum Search	There is a project here that allows access to the UCSB Curriculum Search page.   https://github.com/UCSB-CS56-Projects/cs56-utilities-ucsb-curriculum-htmlunitThat allows you to see what courses are being offered in a particular department in a particular quarter.Do a mash up that allows you to see, for some GE area, which courses from that are are ACTUALLY BEING OFFERED in a particular quarter, e.g. S15.Alternatively, do a mashup that allows you to see, for each GE on an area's list, a list of all quarters that course was offered (from among all the quarters currently available through the UCSB curriculum search page.)   This is helpful because the best 'predictor' of when a course will be offered (and indeed even whether it is EVER going to be offered again) is to see how often it was offered in the recent past, and which quarter(s) it was offered.The next step would be to also indicate for each of those offerings what the enrollment is/was, and the total number of seats in the course, to see whether or not the course is/was/is likely to be full.	
11	CLOSED	Not Assigned	Test for getting a specific department from an area	Test for making sure getSpecificCourses(area, department) works.~50 points	
10	CLOSED	Not Assigned	HELP Feature	A way for the user to input "HELP" to see a list of all Area and Special Subject abbreviations available for input.~100 points	
9	CLOSED	Not Assigned	Lab06	Includes the .md for lab06	
8	CLOSED	Not Assigned	Better Formatting - Usability	The current format is hard to read. Update the formatting at the command line. Also add the course name. The formatting would include columns.Estimated ~ 100 Points	
7	OPEN	Not Assigned	Basic GUI	Encapsulate into a GUI that is easier to work with.Estimated ~200 points	
6	OPEN	Not Assigned	Allow for more sorting options	Allow the user to specify extra requirements GE classes may fulfill such as writing, European Traditions, ethnicity, ETC. Also allow specification of departments and upper or lower division for depth requirement purposes.Estimated ~400pointsIf this proves too difficult, the depth requirement purposes should be simpler but still considered a standalone feature. Let TA know if only doing this for new issue to be set upEstimated ~ 200 points	
5	CLOSED	Not Assigned	Better user documentation	Make the output easier for the users to understand. Some suggestions: parse department codes into department names, get full course name, label expected sections etcestimated ~100 points	
4	CLOSED	Not Assigned	Allow reuse	Currently the program seems to close after one run through; it may be nicer to have it  run till asked to stop so people can look at multiple outputs without having to rerunEstimated ~50 points	
3	CLOSED	Not Assigned	Program does not appear to be working	It appears that this application is broken.  A year later after successfully compiling and running the program it seems to have broken.  When entering a course area to get GE's for it freezes and does not display the output it should.  I suspect the HTML contents of the page http://my.sa.ucsb.edu/catalog/current/UndergraduateEducation/AreaE.aspx have most likely changed and the code scraper needs to be re-worked to account for the new HTML.~Estimated 200 points	
2	CLOSED	Not Assigned	Finished transferring Mantis to Git (Issue #1)	Finished the GEscraper with refactoring/junit/added features/fixed code	
1	CLOSED	Not Assigned	Project Stewardship	*Review both https://foo.cs.ucsb.edu/cs56/issues/0000089 and https://foo.cs.ucsb.edu/cs56/issues/0000088 and decide if one works better than the other or if some features need to be combined*Migrate code from mantis & fix directory structure*Make sure code still works as expected*Add unit tests*Improve Javadoc comments	
cs56-utilities-GEAR-scraper
6	OPEN	Not Assigned	Add more features	Potential features could include:A search bar that the user can type into to find courses.Including the engineering courses in the database.	
5	OPEN	Not Assigned	Domenic Dipeppe/Alex Thielk: finished lab05.md		
4	OPEN	Not Assigned	Update GEAR source	Update URL and page numbers to parse classes from.Approved 50 points	
3	CLOSED	Not Assigned	Issue #1 + optional part	Use "ant run" to run. And "ant runWithGui" to run with gui.@andrewberlsIssue #120 pts for:    Getting Proper Libraries700 pts for:     Implemented working GEAR_Scraper     Followed CoEGECourse implementation     CLI with more advanced features than requested280 pts for:    GUI     Custom URLs~requested: 1000	
2	CLOSED	Not Assigned	basic framework added	The package needs to be fixed in order to run the tests. 	
1	CLOSED	Alan Buzdar	Implement the project according to spec	A minimal starting point has been provided, and now the project has to be built basically from the ground up according to the spec laid out in [README.md](https://github.com/UCSB-CS56-Projects/cs56-utilities-GEAR-scraper/blob/master/README.md). There are a number of sub-tasks to this, namely:* Read the contents of the GEAR catalog PDF into Java objects* Write the code to conform to the interface `CoEGECourse`* Write a class / minimal CLI to accept the URL of a GEAR catalog, and parse/return all course information* (Optional) Add some sort of GUI interface which facilitates specifying URLs, or perhaps accepts file uploads (estimated 200)~estimated 650 points	
cs56-utilities-restaurant-list
13	OPEN	Not Assigned	CS56-W16-Lab05 Submission	Thien Hoang github:thienhoang23Brenda Flores github:bmflores413Response to the lab is in the W16_lab05.md file.	
12	OPEN	Not Assigned	Add Function is completely buggy	When adding a new restaurant with a new cuisine, the cuisine is added but not the restaurant.When adding a new restaurant to an old cuising, the restaurant is not added.	
11	OPEN	Not Assigned	Exit entry creation	The app forces the user to create an entry once they are on the page. We want to give the user a way to exit the page.	
10	OPEN	Not Assigned	Go back by page	When the user presses "go back," go back page by page rather than all the way to the home page.	
9	OPEN	Not Assigned	Integrate with Yelp API to populate database	Create classes that will send web requests to the Yelp API in order to programmatically collect data on local restaurants. This is a hefty issue, but will extend the usability of the program immensely.Resources:Yelp API documentationhttps://www.yelp.com/developers/documentation/v2/overviewHTTP requests in Javahttp://www.mkyong.com/java/how-to-send-http-request-getpost-in-java/Points - 1000	
8	OPEN	Not Assigned	Allow editing of entries	Allow users to edit existing entries.Points - 250	
7	OPEN	Not Assigned	Add support to save images	Enable users to save images of the restaurant when they add their ownPoints - 300	
6	CLOSED	Not Assigned	Completed Project 2	Fixed issue #4 and issue #5Requested ~350	
5	CLOSED	Not Assigned	Error when loading a user-created restaurant	After clicking "Add New", and then entering valid input and clicking "Submit", I am taken back to the window with the drop-down selector with the text "-Select Cusine-". Here I select the new category that I created and the GUI freezes. This is the first line of the exception```[java] Exception in thread "AWT-EventQueue-0" java.lang.NumberFormatException:```	
4	CLOSED	Not Assigned	Export restaurant database to CSV file	Add a feature to save the currently populated restaurant database to a comma separated value file, which can later be loaded by the existing loading feature.~Estimated 300 pts	
3	CLOSED	Kyle Jorgensen	Finished project 1	@jcneally We finished issue #1 and issue #2~requested: 700	
2	CLOSED	Andrew Pang	Sanitize user input	When inputting a restaurant through the GUI, users can submit invalid information and cause multiple errors. Make sure the user inputs valid information before this is saved, preferably giving visible feedback to the user.~estimated 300 points	
1	CLOSED	Brandon Hammel	File parser to populate database	Add a way to populate the restaurant database through (for example) comma separated value files (CSV) or other file parsing.~estimated 400 pts	
cs56-utilities-credit-card-validator
14	OPEN	Not Assigned	SG/AAR added the W16_lab05.md with all the comments about the code		
13	OPEN	Not Assigned	Convert to Web Application	Host the program on heroku and convert the GUI to an html form.Bootstrap is a great front-end framework to use in order to make the app look aesthetically pleasing.http://getbootstrap.com/	
12	CLOSED	Not Assigned	Merging EasterAndJay branch to master		
11	CLOSED	Not Assigned	Upload changes made in W15 to EasterAndJay branch	Uploading all my changes to the EasterAndJay branch of the original repo	
10	CLOSED	Not Assigned	Ishi added few more minor GUI tweaks	Added support to describe the type of card that is being validated (e.g. Visa, Mastercard, Amex, etc...).Changed some GUI settings to make it more responsive when resized	
9	OPEN	Not Assigned	Add support to generate more than one credit card number at time	Allow the user to select an amount of credit card numbers he/she would like to generate at one time.Provide the user with appropriate presentation of these numbers (i.e. output text box should be proportional to # of credit card numbers to be generated)	
8	OPEN	Not Assigned	Add asterisk character view support	Currently when a user is inputting their credit card number, the actual numbers show up. Similar to how passwords are displayed upon input, the user should have an option to show the credit card number digits as asterisks "*" as opposed to actual digits.ex) 1234567890123456 should show as:      ********************	
7	CLOSED	Not Assigned	New and improved Credit Card Validator	Now has GUI, correct validation/generation functions, correct package structure, JUnit support, cleaned up comments, and user can choose to create Visa, Amex, Discover, MasterCard.	
6	CLOSED	Not Assigned	Finished low hanging fruit + GUI	Fixed the build.xml file to correctly run JUnit tests. Added local copy of JUnit in the lib subdirectory, added correct package structure. Almost finished with GUI	
5	CLOSED	Not Assigned	Fix Generate function	The methods for generating a random credit card number do not actually generate valid credit card numbers. The methods in RandomCardGen.java need to be fixed.	
4	CLOSED	Not Assigned	fix Test files	Currently doesn't compile with junit test files, fix the import error to get program compiling	
3	CLOSED	Not Assigned	Add support for choosing different issuing networks	Credit card numbers have different fields with different meanings. For example the first digit signifies the "system", e.g. Visa or Mastercard. For each of these systems, the numbers have different structure and meanings. The app should give the user the ability to choose between systems such as American Express / Visa / Mastercard, and generate valid numbers for each.There is information available on how the numbers are structured [here](http://money.howstuffworks.com/personal-finance/debt-management/credit-card1.htm) and [here](http://www.getcreditcardnumbers.com/).~estimated 200	
2	CLOSED	Not Assigned	Add a GUI	Right now the project only provides a command-line interface for generating and validating numbers. There should be a GUI interface with buttons allowing the user to choose between generating/validating, as well as a text input to allow them to type or paste in a number to validate.~estimated 350	
1	CLOSED	Not Assigned	Change code to use proper package structure	The code does not currently use any sort of package structure The code and directory structure should be modified to reflect the new style: `src/edu/ucsb/cs56/projects/utilities/credit_card_validator`, corresponding to a package name of `edu.ucsb.cs56.projects.utilities.credit_card_validator`~estimated 50	
cs56-github-apiv3-simple-rest-client
10	OPEN	Not Assigned	Pull request for lab07	Yamen Alghrer lab07- I was able to fix the issue where not all repositories of UCSB-CS56-Projects were being listed by passing a parameter to the URL.- I was able to iterate through the issues and make it so that it is one issue per line instead of one project per line- Ran into an issue where I reach the x-rate limit...need to authorize application to increase the limit	
9	OPEN	Not Assigned	Fix output of .csv file	Make sure that the .csv file looks like a spreadsheet when it is opened in something like Excel~estimated 100 points	
8	CLOSED	Not Assigned	Parse the javadoc	given a javadoc link; parse through it look for authors and date tag and stuff directly after it, checks for existence returns yes or noestimated 100 points	
7	OPEN	Not Assigned	Add on to issue one, one more level of nesting that iterates through the comments	In issue one we are making the .csv file every line should be a separate issue of every project repo. In this issue, make it so that every line has another line that has all the issue comments. (Find a way to differentiate the comments so that they don't look like the rest of the issue and that you know which issue they belong to. i.e. comment number or white space).points: 200	
6	OPEN	Not Assigned	Given a list of github IDs, check whether each one has a W15-lab04  repo	For each one, write to a file Yes or No whether the repo exists. If it does exist, write the URL of the repo.points:200	
5	OPEN	Not Assigned	List all members of an organization	For UCSB-CS56-W15 organization, list the github IDs of every member to a file.It currently only lists 40.points:75 	
4	CLOSED	Not Assigned	Not accounting for all repos	I noticed that the spreadsheet currently produced does not contain all of the repos in this UCSB-CS56-Projects organization.I also noticed that there are repos missing from https://api.github.com/orgs/UCSB-CS56-Projects/reposThis is probably not an issue with the code, but an issue that should be addressed nonetheless. Maybe we have the wrong link? Or possibly the organization needs to be updated somewhere...?	
3	OPEN	Not Assigned	PARSE Javadoc for "Author" and "Date" 	given a javadoc link; parse through it look for authors and date tag and stuff directly after it, checks for existence returns yes or noestimated 100 points	
2	OPEN	Not Assigned	Parse README files for a javadoc link	makes parser to check for legitimate javadoc link returns yes or no ~100 pointsgoes through all students and makes text document also printing the link~extra 75 points	
1	OPEN	Not Assigned	Add code that can go through every repo in UCSB-CS56-Projects, and every issue, and make a spreadsheet file (.csv) file of every issue	What we want is a a .csv file, that has all the same columns as the existing .csv file created by CS56ProjectList.java BUT instead of just one row (line) per repo, want one line per ISSUE.And add extra columns, which are issue number, issue status (open/closed), user assigned to, title, description.estimate: 300 points.	
cs56-apidemo-facebook
cs56-utilities-GoldScheduler
cs56-scrapers-ucsb-curriculum
19	OPEN	Not Assigned	KZ/NL Wrote about the current state of the project/what could be done…	… to improve itPartners: Kevin Zaragoza, CSIL: K_zara95Natasha Lee, CSIL: natashalee	
18	OPEN	Not Assigned	Course Queries	First complete the implementations for the remaining stubbed methods. There are a number of methods with stub implementations but each should be fairly straight forward provided that issue #10 has been completed.Right now the program is hard coded to search for computer science courses in the quarter of S14. Design a search criteria upon which the user can search for courses. This is an opportunity for you to get creative here. Have you ever thought that Gold's course search or even "Advanced" course search was highly limited and wanted to make more specific searches on courses? Prompt the user for the search criteria you deem important and print the resulting courses. You may decide the user can input a series of time intervals and be given the results for the courses that do not conflict with these time intervals, etc. There are infinite possibilities.500 points	
17	OPEN	Not Assigned	Add test cases	Add additional test cases for UCSBLectureTest, UCSBSectionTest, and UCSBCurriculumSearchTest.	
16	OPEN	Not Assigned	Add defensive try-catch blocks	Screen scrapers are destined to rot. My nature, they depend on the structure of the particular web site that you are scraping...many websites become restructured and rewritten over the years, which will inevitably break any scrapers using them.To make this screen scraper easier to maintain, add try-catch blocks to any pieces of code that are susceptible to breaking and refer to them in the comments below.I already found one for you as an example. I did not add a try-catch block so go ahead and complete that for a free 100 pts :). Search for the comment that says *issue* on line 284 of UCSBCurriculumSearch.java.Each appropriate try-catch block:Approved 100pts	
15	OPEN	Not Assigned	Create a user-friendly GUI	Currently the program is used through the command line. Create a GUI so that users can enter the information (e.g. CMPSC, Spring, 2014, Undergraduate) in a user-friendly way. I would suggest using drop down menus like it's done on the website being scraped (https://my.sa.ucsb.edu/public/curriculum/coursesearch.aspx).Drop-down menus would require that you would need to scrape all of the departments and store them somewhere (text file) so the program could read them in on start.Approved 500 pts	
14	CLOSED	Not Assigned	Update README.md	Added images and some clarifying text.	
13	OPEN	Not Assigned	Parse enrollCode for lectures with no sections	The lectures and sections seem to be correctly parsing.Enroll codes are only present in sections and not in lectures. However, there are some lectures with no sections at all, such as CMPSCCS 130A of Spring 2014. These lectures DO have Enroll codes.Add an enrollCode data member inside UCSBLecture.java and add/edit the appropriate getters/setters/toString methods.Parse the enroll code for lectures that have no sections.~estimated 100	
12	CLOSED	Kyle Jorgensen	cs56-scapers-ucsb-curriculum: Kevin Mai pull request	jstaahl~requested: 550	
11	CLOSED	Kevin Mai	Allow the user to make course queries (you can get creative here!)	~depends #10 First complete the implementations for the remaining stubbed methods. There are a number of methods with stub implementations but each should be fairly straight forward provided that issue #10 has been completed.Right now the program is hard coded to search for computer science courses in the quarter of S14. Design a search criteria upon which the user can search for courses. This is an opportunity for you to get creative here.  Have you ever thought that Gold's course search or even "Advanced" course search was highly limited and wanted to make more specific searches on courses?  Prompt the user for the search criteria you deem important and print the resulting courses. You may decide the user can input a series of time intervals and be given the results for the courses that do not conflict with these time intervals, etc.  There are infinite possibilities.~estimated 250	
10	CLOSED	Kevin Mai	Implement Section Scraping	Implement the stub method parseSectionHtml() to create section objects that get added to the most recently parsed lecture object. First you will need to fix the method findPrimaryCourseAbbr().~estimated 150	
9	CLOSED	Not Assigned	Resolving Issue#1	Updated README for issue #1	
8	CLOSED	Not Assigned	This is a test	fixes #1	
7	CLOSED	Not Assigned	Fix 500 internal error	Fixes issue #6	
6	CLOSED	Not Assigned	500 Internal Error when running	When scraping server returns a 500 error due to malformed request~requested: 360	
5	CLOSED	Not Assigned	Added stuff for HTTPS		
4	CLOSED	Mark Nguyen	URL has moved to https, so must change code to use HTTPS.	Turning on debug, we see that the URL being retrieved by the Java code is returning the page:```run:     [java] extractHiddenFieldValue: page=<html><head><title>Moved Permanently</title></head><body><p>The URI that you requested has been <a href="https://my.sa.ucsb.edu/public/curriculum/coursesearch.aspx">moved to here</a>.</p></body></html>```Here are a few links from Google searching "java https"  that might be helpful.http://stackoverflow.com/questions/6927427/how-to-send-https-post-request-in-javahttp://www.mkyong.com/java/java-https-client-httpsurlconnection-example/	
3	CLOSED	Not Assigned	added jar file for junit		
2	CLOSED	Not Assigned	I made the build.xml a little better.  I hope you like it.  I added descriptions. You're welcome.		
1	CLOSED	null	enhance the project description in the README	Take the description from [this page](https://foo.cs.ucsb.edu/cs56/issues/0000660/) and translate it to markdown in the README.md file.	
cs56-scrapers-baseball-stats
15	OPEN	Not Assigned	Lab05 overall project analysis	Comments and analysis on baseball statistics program.	
14	OPEN	Not Assigned	Make an All-Star/Fantasy Team	Add a feature that can create a team of all of the best players i.e. an All-Star team or fantasy team.  This will rank the players based on who has high statistics in several categories.	
13	OPEN	Not Assigned	Sort	Add a feature that sorts the players so that they are sorted by highest to lowest batting average, or highest to lowest home runs, etc. This would be done by clicking the particular statistic in the header, which would then sort players based on that statistic which was clicked on.	
12	CLOSED	Not Assigned	proj 2 pull request	Fixed most of the comments inclduing adding @Before public void setup() methods to all of the test classes and removing multiple assert statements per, and using assertTrue.	
11	CLOSED	Kyle Jorgensen	Project 1 submission	~requested: 500#3 for 50 points#6 for 150 points#4 for 300 points @jstaahl	
10	OPEN	null	Fuzzy Search	This issue depends on #9 Once search is working for players, add the ability for ["fuzzy search", also known as "approximate string matching"](http://en.wikipedia.org/wiki/Approximate_string_matching). For example if I couldn't remember a player's full first and last name, but I remembered that his first name began with "Han" and his last name began with "Ram", I could search "Han Ram" and be presented with the player "Hanley Ramirez". Or, if I forgot how to spell his name and typed "Hanly Ramirez" I should still be presented with the result for "Hanley Ramirez". There should be some [Solr](https://lucene.apache.org/solr/) library functions available to help achieve this.Estimated 250 pts	
9	OPEN	null	Search functionality	Add the appropriate Java Swing elements to create a "search box" where you can enter the name of a player for which you would like to view statistics. This would be used to filter the data. For example, typing "Tony Gwynn" would result in just the one row of statistics for that player. Alternatively, typing "Gonzalez" should result in the statistics for any player with "Gonzalez" in his name. This means that the search should look at both first and last names. If there are no results found for a given search, then display an appropriate message to the user. The [Apache Solr](http://lucene.apache.org/solr/) library may be helpful for this. [Here is a simple tutorial](http://lucene.apache.org/solr/4_0_0/tutorial.html). 	
8	OPEN	null	Advanced Stats - Splits	Right now the *Split* class is not used for the display of any statistics. Create a way of viewing an "Advanced Statistics" window, which will contain a similar table layout, but will display statistics for associated splits. It makes the most sense to organize a table of splits by player. So, design a way to select one player, and then display his respective splits. This is an example layout| Split | Statistic_1 | Statistic_2 | Statistic_3 ||-------|---------------|-----------|--------------||  "name of split"  |  aaa | bbb | ccc |For more examples, look at the layout of split statistics [for players on fangraphs.com](http://www.fangraphs.com/statsplits.aspx?playerid=8001&position=SS&season=2013)Estimated 600 pts	
7	OPEN	null	View a player's stats	When viewing the whole table of data, implement the ability to select a player and open a new window with detailed statistics for that player. The exact user interaction which will cause the opening of the new window is left up to the developer. One option might be to double click on a player's name to cause the opening of a new window. Another option might be to add additional buttons next to the table, and when a player's name is selected, the user can click a button to "Show Player Stats" which causes the opening of the new window. Estimated 300 pts	
6	CLOSED	null	Sort stats by column	When viewing the table of statistics, implement the ability to click on the header of a given column to sort the players in the table by the value in that specific column. For example, if you click on the column labeled as HR, then all of the players in the table will be sorted by highest to lowest HR value. This will require some advanced knowledge about the Java Swing GUI elements. Estimated 400 points	
5	OPEN	null	Refactor "global" functions into better object-oriented design	taken from [Conrad's comment on Mantis](https://foo.cs.ucsb.edu/56mantis/view.php?id=785): > As a challenge: see if you can find a way to handle the interaction among the components without resorting to using what amount to "global variables", i.e. the public static references to Main.blah. It takes a bit more thinking, but will result in a more robust piece of code, with more potential for reuse, and fewer opportunities to make errors.The `Main.java` file is the primary location of this issue, with the following static functions```java    public static MainWindow getMainWindow()	{		return mainwindow;	}		public static StatReader getStatReader()	{		return statReader;	}		public static StatKeeper getStatKeeper()	{		return statKeeper;	}```The goal is to abstract the logic for each of these classes, so that you don't need to access the `statReader` or `statKeeper` via the Main class.Estimated 450 pts	
4	CLOSED	null	Add JUnit tests for basic classes	For long-term development of this project, it is very important to have good test coverage of the existing code. Since there are multiple "moving parts" in this project -- from the parsing of the data to calculating statistics and maintaining all the info for lots of players -- tests are helpful to make sure that when we add new functionality we don't break any existing code. Add JUnit tests for the following classes, testing all functions and corner cases. * Player* Split* StatCalculator* StatKeeper* StatManager* StatReader (This one handles the XML parsing, so you may need to also create some "test" XML files)* Statistic* XMLContentHandlerEstimated 300 pts 	
3	CLOSED	null	Add some more javadoc comments	There are some areas of the code that could use some more javadoc comments to explain the functionality of certain classes. Starting with this issue is a good way to understand how this scraper works. The classes that need more javadocs are:* Player* StatManager* StatKeeper* Statistic* XMLContentHandler (if you have time. This class implements an interface called "ContentHandler", so you will need to understand what a ContentHandler does to understand what this class does)Estimated points - 50 ptsEstimated points (including XMLContentHandler) - 80 pts 	
2	CLOSED	Not Assigned	refine code to remove "global vairables"	taken from [Conrad's comment on Mantis](https://foo.cs.ucsb.edu/56mantis/view.php?id=785): > As a challenge: see if you can find a way to handle the interaction among the components without resorting to using what amount to "global variables", i.e. the public static references to Main.blah. It takes a bit more thinking, but will result in a more robust piece of code, with more potential for reuse, and fewer opportunities to make errors.	
1	CLOSED	Not Assigned	allow the user to download additional game files	Right now it uses sample data that is already downloaded. An enhancement could allow a user to add more files to add to the statistics	
cs56-utilities-GEscraper
20	OPEN	Not Assigned	Create W16_lab05.md	Marco SimoneSimon Huynh	
19	OPEN	Not Assigned	Allow searching on multiple criteria	Let users find courses that fulfill say Area D and Ethnicity and Writing requirement.Possibly implement a full boolean searche.g. (Area D or Area E or Area G) and (Writ or Ethnicity)Approved 350 points	
18	OPEN	Not Assigned	Web Client	Make a web client that runs off your csil account. May want to consider ruby on rails, node, django, or flask. Or spring if you LOVEEEE java.  Save past searches and create an account on this web app. ~500 pts	
17	OPEN	Not Assigned	Sort Results	Be able to sort the results by department, subject, upper/lower div, course number. ~200 pts	
16	OPEN	Not Assigned	Incorrect Input Handling	More verbose exception handling when users enter the incorrect area and department abbreviations, i.g. Give an example of an approved input~50 points	
15	OPEN	Not Assigned	Create Test Cases via JUnit	The application runs but needs to have adequate test cases. These test cases need to check if the right list of area and departments and any combination is being returned.~100 points	
14	CLOSED	Not Assigned	Beautification	Updated comments and pointed out future refractoring25 Points <- Paz approved	
13	CLOSED	Not Assigned	lab07 Pull Request to dlynch305 branch (was lab06)		
12	OPEN	Not Assigned	Mash up of the GE Scraper with the UCSB Curriculum Search	There is a project here that allows access to the UCSB Curriculum Search page.   https://github.com/UCSB-CS56-Projects/cs56-utilities-ucsb-curriculum-htmlunitThat allows you to see what courses are being offered in a particular department in a particular quarter.Do a mash up that allows you to see, for some GE area, which courses from that are are ACTUALLY BEING OFFERED in a particular quarter, e.g. S15.Alternatively, do a mashup that allows you to see, for each GE on an area's list, a list of all quarters that course was offered (from among all the quarters currently available through the UCSB curriculum search page.)   This is helpful because the best 'predictor' of when a course will be offered (and indeed even whether it is EVER going to be offered again) is to see how often it was offered in the recent past, and which quarter(s) it was offered.The next step would be to also indicate for each of those offerings what the enrollment is/was, and the total number of seats in the course, to see whether or not the course is/was/is likely to be full.	
11	CLOSED	Not Assigned	Test for getting a specific department from an area	Test for making sure getSpecificCourses(area, department) works.~50 points	
10	CLOSED	Not Assigned	HELP Feature	A way for the user to input "HELP" to see a list of all Area and Special Subject abbreviations available for input.~100 points	
9	CLOSED	Not Assigned	Lab06	Includes the .md for lab06	
8	CLOSED	Not Assigned	Better Formatting - Usability	The current format is hard to read. Update the formatting at the command line. Also add the course name. The formatting would include columns.Estimated ~ 100 Points	
7	OPEN	Not Assigned	Basic GUI	Encapsulate into a GUI that is easier to work with.Estimated ~200 points	
6	OPEN	Not Assigned	Allow for more sorting options	Allow the user to specify extra requirements GE classes may fulfill such as writing, European Traditions, ethnicity, ETC. Also allow specification of departments and upper or lower division for depth requirement purposes.Estimated ~400pointsIf this proves too difficult, the depth requirement purposes should be simpler but still considered a standalone feature. Let TA know if only doing this for new issue to be set upEstimated ~ 200 points	
5	CLOSED	Not Assigned	Better user documentation	Make the output easier for the users to understand. Some suggestions: parse department codes into department names, get full course name, label expected sections etcestimated ~100 points	
4	CLOSED	Not Assigned	Allow reuse	Currently the program seems to close after one run through; it may be nicer to have it  run till asked to stop so people can look at multiple outputs without having to rerunEstimated ~50 points	
3	CLOSED	Not Assigned	Program does not appear to be working	It appears that this application is broken.  A year later after successfully compiling and running the program it seems to have broken.  When entering a course area to get GE's for it freezes and does not display the output it should.  I suspect the HTML contents of the page http://my.sa.ucsb.edu/catalog/current/UndergraduateEducation/AreaE.aspx have most likely changed and the code scraper needs to be re-worked to account for the new HTML.~Estimated 200 points	
2	CLOSED	Not Assigned	Finished transferring Mantis to Git (Issue #1)	Finished the GEscraper with refactoring/junit/added features/fixed code	
1	CLOSED	Not Assigned	Project Stewardship	*Review both https://foo.cs.ucsb.edu/cs56/issues/0000089 and https://foo.cs.ucsb.edu/cs56/issues/0000088 and decide if one works better than the other or if some features need to be combined*Migrate code from mantis & fix directory structure*Make sure code still works as expected*Add unit tests*Improve Javadoc comments	
cs56-utilities-GEAR-scraper
6	OPEN	Not Assigned	Add more features	Potential features could include:A search bar that the user can type into to find courses.Including the engineering courses in the database.	
5	OPEN	Not Assigned	Domenic Dipeppe/Alex Thielk: finished lab05.md		
4	OPEN	Not Assigned	Update GEAR source	Update URL and page numbers to parse classes from.Approved 50 points	
3	CLOSED	Not Assigned	Issue #1 + optional part	Use "ant run" to run. And "ant runWithGui" to run with gui.@andrewberlsIssue #120 pts for:    Getting Proper Libraries700 pts for:     Implemented working GEAR_Scraper     Followed CoEGECourse implementation     CLI with more advanced features than requested280 pts for:    GUI     Custom URLs~requested: 1000	
2	CLOSED	Not Assigned	basic framework added	The package needs to be fixed in order to run the tests. 	
1	CLOSED	Alan Buzdar	Implement the project according to spec	A minimal starting point has been provided, and now the project has to be built basically from the ground up according to the spec laid out in [README.md](https://github.com/UCSB-CS56-Projects/cs56-utilities-GEAR-scraper/blob/master/README.md). There are a number of sub-tasks to this, namely:* Read the contents of the GEAR catalog PDF into Java objects* Write the code to conform to the interface `CoEGECourse`* Write a class / minimal CLI to accept the URL of a GEAR catalog, and parse/return all course information* (Optional) Add some sort of GUI interface which facilitates specifying URLs, or perhaps accepts file uploads (estimated 200)~estimated 650 points	
cs56-utilities-restaurant-list
13	OPEN	Not Assigned	CS56-W16-Lab05 Submission	Thien Hoang github:thienhoang23Brenda Flores github:bmflores413Response to the lab is in the W16_lab05.md file.	
12	OPEN	Not Assigned	Add Function is completely buggy	When adding a new restaurant with a new cuisine, the cuisine is added but not the restaurant.When adding a new restaurant to an old cuising, the restaurant is not added.	
11	OPEN	Not Assigned	Exit entry creation	The app forces the user to create an entry once they are on the page. We want to give the user a way to exit the page.	
10	OPEN	Not Assigned	Go back by page	When the user presses "go back," go back page by page rather than all the way to the home page.	
9	OPEN	Not Assigned	Integrate with Yelp API to populate database	Create classes that will send web requests to the Yelp API in order to programmatically collect data on local restaurants. This is a hefty issue, but will extend the usability of the program immensely.Resources:Yelp API documentationhttps://www.yelp.com/developers/documentation/v2/overviewHTTP requests in Javahttp://www.mkyong.com/java/how-to-send-http-request-getpost-in-java/Points - 1000	
8	OPEN	Not Assigned	Allow editing of entries	Allow users to edit existing entries.Points - 250	
7	OPEN	Not Assigned	Add support to save images	Enable users to save images of the restaurant when they add their ownPoints - 300	
6	CLOSED	Not Assigned	Completed Project 2	Fixed issue #4 and issue #5Requested ~350	
5	CLOSED	Not Assigned	Error when loading a user-created restaurant	After clicking "Add New", and then entering valid input and clicking "Submit", I am taken back to the window with the drop-down selector with the text "-Select Cusine-". Here I select the new category that I created and the GUI freezes. This is the first line of the exception```[java] Exception in thread "AWT-EventQueue-0" java.lang.NumberFormatException:```	
4	CLOSED	Not Assigned	Export restaurant database to CSV file	Add a feature to save the currently populated restaurant database to a comma separated value file, which can later be loaded by the existing loading feature.~Estimated 300 pts	
3	CLOSED	Kyle Jorgensen	Finished project 1	@jcneally We finished issue #1 and issue #2~requested: 700	
2	CLOSED	Andrew Pang	Sanitize user input	When inputting a restaurant through the GUI, users can submit invalid information and cause multiple errors. Make sure the user inputs valid information before this is saved, preferably giving visible feedback to the user.~estimated 300 points	
1	CLOSED	Brandon Hammel	File parser to populate database	Add a way to populate the restaurant database through (for example) comma separated value files (CSV) or other file parsing.~estimated 400 pts	
cs56-utilities-credit-card-validator
14	OPEN	Not Assigned	SG/AAR added the W16_lab05.md with all the comments about the code		
13	OPEN	Not Assigned	Convert to Web Application	Host the program on heroku and convert the GUI to an html form.Bootstrap is a great front-end framework to use in order to make the app look aesthetically pleasing.http://getbootstrap.com/	
12	CLOSED	Not Assigned	Merging EasterAndJay branch to master		
11	CLOSED	Not Assigned	Upload changes made in W15 to EasterAndJay branch	Uploading all my changes to the EasterAndJay branch of the original repo	
10	CLOSED	Not Assigned	Ishi added few more minor GUI tweaks	Added support to describe the type of card that is being validated (e.g. Visa, Mastercard, Amex, etc...).Changed some GUI settings to make it more responsive when resized	
9	OPEN	Not Assigned	Add support to generate more than one credit card number at time	Allow the user to select an amount of credit card numbers he/she would like to generate at one time.Provide the user with appropriate presentation of these numbers (i.e. output text box should be proportional to # of credit card numbers to be generated)	
8	OPEN	Not Assigned	Add asterisk character view support	Currently when a user is inputting their credit card number, the actual numbers show up. Similar to how passwords are displayed upon input, the user should have an option to show the credit card number digits as asterisks "*" as opposed to actual digits.ex) 1234567890123456 should show as:      ********************	
7	CLOSED	Not Assigned	New and improved Credit Card Validator	Now has GUI, correct validation/generation functions, correct package structure, JUnit support, cleaned up comments, and user can choose to create Visa, Amex, Discover, MasterCard.	
6	CLOSED	Not Assigned	Finished low hanging fruit + GUI	Fixed the build.xml file to correctly run JUnit tests. Added local copy of JUnit in the lib subdirectory, added correct package structure. Almost finished with GUI	
5	CLOSED	Not Assigned	Fix Generate function	The methods for generating a random credit card number do not actually generate valid credit card numbers. The methods in RandomCardGen.java need to be fixed.	
4	CLOSED	Not Assigned	fix Test files	Currently doesn't compile with junit test files, fix the import error to get program compiling	
3	CLOSED	Not Assigned	Add support for choosing different issuing networks	Credit card numbers have different fields with different meanings. For example the first digit signifies the "system", e.g. Visa or Mastercard. For each of these systems, the numbers have different structure and meanings. The app should give the user the ability to choose between systems such as American Express / Visa / Mastercard, and generate valid numbers for each.There is information available on how the numbers are structured [here](http://money.howstuffworks.com/personal-finance/debt-management/credit-card1.htm) and [here](http://www.getcreditcardnumbers.com/).~estimated 200	
2	CLOSED	Not Assigned	Add a GUI	Right now the project only provides a command-line interface for generating and validating numbers. There should be a GUI interface with buttons allowing the user to choose between generating/validating, as well as a text input to allow them to type or paste in a number to validate.~estimated 350	
1	CLOSED	Not Assigned	Change code to use proper package structure	The code does not currently use any sort of package structure The code and directory structure should be modified to reflect the new style: `src/edu/ucsb/cs56/projects/utilities/credit_card_validator`, corresponding to a package name of `edu.ucsb.cs56.projects.utilities.credit_card_validator`~estimated 50	
cs56-github-apiv3-simple-rest-client
10	OPEN	Not Assigned	Pull request for lab07	Yamen Alghrer lab07- I was able to fix the issue where not all repositories of UCSB-CS56-Projects were being listed by passing a parameter to the URL.- I was able to iterate through the issues and make it so that it is one issue per line instead of one project per line- Ran into an issue where I reach the x-rate limit...need to authorize application to increase the limit	
9	OPEN	Not Assigned	Fix output of .csv file	Make sure that the .csv file looks like a spreadsheet when it is opened in something like Excel~estimated 100 points	
8	CLOSED	Not Assigned	Parse the javadoc	given a javadoc link; parse through it look for authors and date tag and stuff directly after it, checks for existence returns yes or noestimated 100 points	
7	OPEN	Not Assigned	Add on to issue one, one more level of nesting that iterates through the comments	In issue one we are making the .csv file every line should be a separate issue of every project repo. In this issue, make it so that every line has another line that has all the issue comments. (Find a way to differentiate the comments so that they don't look like the rest of the issue and that you know which issue they belong to. i.e. comment number or white space).points: 200	
6	OPEN	Not Assigned	Given a list of github IDs, check whether each one has a W15-lab04  repo	For each one, write to a file Yes or No whether the repo exists. If it does exist, write the URL of the repo.points:200	
5	OPEN	Not Assigned	List all members of an organization	For UCSB-CS56-W15 organization, list the github IDs of every member to a file.It currently only lists 40.points:75 	
4	CLOSED	Not Assigned	Not accounting for all repos	I noticed that the spreadsheet currently produced does not contain all of the repos in this UCSB-CS56-Projects organization.I also noticed that there are repos missing from https://api.github.com/orgs/UCSB-CS56-Projects/reposThis is probably not an issue with the code, but an issue that should be addressed nonetheless. Maybe we have the wrong link? Or possibly the organization needs to be updated somewhere...?	
3	OPEN	Not Assigned	PARSE Javadoc for "Author" and "Date" 	given a javadoc link; parse through it look for authors and date tag and stuff directly after it, checks for existence returns yes or noestimated 100 points	
2	OPEN	Not Assigned	Parse README files for a javadoc link	makes parser to check for legitimate javadoc link returns yes or no ~100 pointsgoes through all students and makes text document also printing the link~extra 75 points	
1	OPEN	Not Assigned	Add code that can go through every repo in UCSB-CS56-Projects, and every issue, and make a spreadsheet file (.csv) file of every issue	What we want is a a .csv file, that has all the same columns as the existing .csv file created by CS56ProjectList.java BUT instead of just one row (line) per repo, want one line per ISSUE.And add extra columns, which are issue number, issue status (open/closed), user assigned to, title, description.estimate: 300 points.	
cs56-apidemo-facebook
cs56-utilities-GoldScheduler
